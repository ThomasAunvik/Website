import { getServerSession } from "next-auth";
import { authOptions } from "./auth_options";

export const registerPassless = async () => {
  const session = await getServerSession(authOptions);
  if (!session) return null;

  const payload = {
    userId: session.userId, // Required. A WebAuthn User Handle, which should be generated by your application. Max. 64 bytes.
    username: session.user.email, // Required. A human readable username used for user authentication, should be chosen by the user.
    // ...For more options, please see the API reference for /register/token.
  };

  // POST the payload to the Passwordless.dev API using your API private secret.
  const apiUrl = "https://v4.passwordless.dev";
  const { token } = await fetch(apiUrl + "/register/token", {
    method: "POST",
    body: JSON.stringify(payload),
    headers: {
      ApiSecret: process.env.PASSWORDLESS_API_KEY ?? "",
      "Content-Type": "application/json",
    },
  }).then((r) => r.json());

  return token as string;
};

export interface PassAuthResponse {
  success: boolean;
  userId: string;
  timestamp: Date;
  rpid: string;
  origin: string;
  device: string;
  country: string;
  nickname: string;
  credentialId: string;
  expresAt: Date;
}

export const verifyPasswordless = async (token: string) => {
  // POST the verification token to the Passwordless.dev API using your API private secret.
  const apiurl = "https://v4.passwordless.dev";
  const response = await fetch(apiurl + "/signin/verify", {
    method: "POST",
    body: JSON.stringify({ token }),
    headers: {
      ApiSecret: process.env.PASSWORDLESS_API_KEY ?? "",
      "Content-Type": "application/json",
    },
  });

  // Cache the API response (see below) to a variable.
  const body = await response.json();

  // Check the API response for successful verification.
  // To see all properties returned by this endpoint, checkout the Backend API Reference for /signin/verify.
  if (body.success) {
    console.log("Successfully verified sign-in for user.", body);
  } else {
    console.warn("Sign in failed.", body);
  }

  return body as PassAuthResponse;
};
