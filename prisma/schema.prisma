// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("PRISMA_CONNECTION_STRING") // uses connection pooling
    directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
    shadowDatabaseUrl = env("POSTGRES_URL_SHADOW") // used for migrations
}

model Account {
    id                String  @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(uuid())
    username      String    @unique
    name          String?
    email         String    @unique
    emailVerified DateTime?
    admin         Boolean   @default(false)

    image    String?
    accounts Account[]
    sessions Session[]

    posts     Post[]         @relation("PostsCreatedBy")
    revisions PostRevision[] @relation("UserPostRevision")

    credentials Credential[]
}

model Credential {
    id   String @id @default(uuid())
    salt Bytes?
    type String

    userId String
    user   User   @relation(fields: [userId], references: [id])

    createdDate DateTime @default(now())

    userLabel       String
    secretData      Json // {"value":"passhash","salt":"randomness==","additionalParameters":{}}
    credentialsData Json // {"hashIterations":27500,"algorithm":"pbkdf2-sha256","additionalParameters":{}}
    priority        Int
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id String @id @default(uuid())

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    removedAt DateTime?

    createdById String
    createdBy   User   @relation("PostsCreatedBy", fields: [createdById], references: [id])

    revisions PostRevision[] @relation()

    title      String
    undertitle String
    content    String
}

model PostRevision {
    revisionId String @id @default(uuid())

    post   Post   @relation(fields: [postId], references: [id])
    postId String

    field String
    value String

    description String?

    createdAt DateTime @default(now())

    createdById String
    createdBy   User   @relation("UserPostRevision", fields: [createdById], references: [id])
}
